openapi: "3.0.2"
info:
  title: Formlabs Local API
  version: 0.8.9
  termsOfService: /formlabs-api-license-agreement.html
  contact:
    name: Formlabs Support
    url: https://support.formlabs.com/
  x-logo:
    url: '/Formlabs-Logo-rgb-black.svg'
    altText: Formlabs Logo
  description: |
    # Introduction
    The Formlabs Local API is designed for integrations that want to automate
    job preparation, getting local-network printer status, or sending jobs to Formlabs printers
    without launching the PreForm graphical user interface. A server application
    must be installed and run on a user's computer to use this API.

    Example use cases:
    - Scripted job preparation that takes a folder of models, sets up a print,
      and uploads it to a printer without user input.
    - Deep and custom integrations into 3D Modeling and Design software to
      prepare print scenes beyond the scope of the PreForm Command Line Arguments.

    This API uses RESTful principles. This means the API is organized around
    resources and collections of resources. Resources and collections are each
    available at their own URI. You can interact with these resources using
    standard HTTP Methods on the resource's URI.

    Example endpoint:
    ```
    GET http://localhost:44388/scene/
    ```

    Responses from the API server will be in JSON and are documented throughout
    the reference docs. This API is described by an [OpenAPI Specification](https://spec.openapis.org/oas/v3.1.0).
    This interactive documentation is automatically generated from the specification file.

    # Technical Overview

    ## PreFormServer Background Application
    All Local API integrations involve starting the PreFormServer background
    application to expose its HTTP API, then making local HTTP API calls in your own code.
    This application is like [PreForm](https://formlabs.com/software/preform/), Formlabs' regular job preparation application,
    but it does not open a graphical window, and interaction is done via HTTP API requests.
    The PreFormServer application is supported on Windows and MacOS with separate
    downloads for each Operating System.

    ### Installing PreFormServer
    The PreFormServer application can be downloaded from the [Formlabs API downloads and release notes page](https://support.formlabs.com/s/article/Formlabs-API-downloads-and-release-notes).
    After downloading, unzip the file and move the application to the desired location on your computer.
    Any location can be used as the path to the application should be referenced from your integration code.

    ### Starting PreFormServer
    The PreFormServer application can started manually from your Operating System's command prompt or terminal,
    but most integrations will start the application programmatically from integration code.
    The command line argument `--port` is required to specify the port number the HTTP Server will listen on.

    The HTTP API server started by the PreFormServer application cannot immediately respond to requests.
    When the server is ready to accept requests, it will output `READY FOR INPUT` in the standard output.

    For example, running the PreFormServer application on Windows from the command prompt:
    ```
    PreFormServer.exe --port 44388
    ```
    will output something like the following:
    ```
    starting HTTP server
    Listening...
    HTTP server listening on port 44388
    READY FOR INPUT
    ```

    ## Making API Requests
    The code to make HTTP API requests to a running PreFormServer can be written
    directly in your integration code or by using a generated library that does
    the API calls. The endpoints and format of the HTTP API are described on this
    page and in the openapi.yaml file.  Formlabs provides an example [Python library](https://github.com/Formlabs/formlabs-api-python)
    that handles the setup and request formatting.

    ## Glossary
    - **Scene**: The current state of a job that can be printed on a particular printer model.
      This includes both the “Scene Settings” and all of the currently loaded models and their support structures.
    - **Scene Settings**: Printer type and material information of scene. Describes the
      build platform size, the printer capabilities, and what material and print settings
      it is set up to be printed with.

    ## Stateful Interactions
    The PreForm Server is stateful in that while it is running, it keeps a cache of the
    current scene and requests will use the cached scene and possibly modify it.
    For example, initially a scene may be empty and then if a load model request is made
    then the cached scene will have one model loaded. Calling the load model requests
    again will load another copy of the model resulting in two models in the cached scene.

    ## Blocking Calls & Asynchronous Requests
    Unless otherwise stated, API calls are blocking: the HTTP request will not return
    until the operation has completed.  Some requests like running the auto support
    action on a scene with many complicated models could take over 1 minute (depending
    on computer resources). The Server has a timeout of 10 minutes for all requests.

    Some long-running operations can be called asynchronously by adding `?async=true` to the
    request. These requests will return immediately and the operation will be tracked
    separately. The caller can poll for completion using the `/operations/{operation_id}/`
    endpoint, and track the percentage progress of the outstanding operation.

    Requests involving the scene will always use the scene state at the time the request
    was made, without any partially completed operations. For example, if a “get scene”
    request is made during a “auto support” request that has not finished, then the
    “get scene” request will return data that will not include the auto support changes.

    Multiple requests editing the same scene should NOT be made in parallel. If an "auto
    layout" request is made during an "auto support" request that has not finished,
    whichever operation finishes last will "win": either an auto-layout of unsupported
    models or the original layout with supports. PreformServer currently gives no warning
    when this happens.

    ## File Paths
    When saving and loading files, the local API inputs expect full operating system paths
    to local files on disk.

    Correct file path:
    - `C:\Projects\Models\part.stl`

    Incorrect file paths:
    - `.\Models\part.stl`
    - `%ENV_VAR%\part.stl`
    - `part.stl`
    - `https://filestorage.com/part.stl`

    # Errors
    Conventional HTTP response codes are used to indicate the success or failure of
    an API request. In general: Codes in the 2xx range indicate success. Codes in
    the 4xx range indicate an error that failed given the information provided.
    Codes in the 5xx range indicate an error with Formlabs' servers.

    # Security
    The HTTP Server that PreForm uses to communicate is only exposed to the local
    network of your computer and not to the public Internet, unless you have
    configured your computer to expose the port running the PreForm Server to the Internet.

    Some requests require an Internet connection, require Dashboard login, and
    make web requests to perform their action (such as printing to a remote printer).
servers:
  - url: http://localhost:44388
tags:
  - name: Devices
    description: "Endpoints related to Formlabs devices"
  - name: Modifying a Scene
    description: "Endpoints related to modifying the scene"
  - name: Getting Scene Information
    description: "Endpoints related to getting information about a scene"
  - name: Exporting
  - name: Printing
  - name: Remote Access
    description: |
      Endpoints related to remote access and printing that require Internet access
      and authentication with Formlabs Web Services."
  - name: Print Settings
    description: "Endpoints related to getting available print settings."
  - name: Operations
    description: "Long-running operations called with `?async=true`, which return immediately and can be polled for completion."
  - name: API Info
    description: "Get information about the API itself"
components:
  schemas:
    ErrorModel:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Unique and stable string identifying this error, e.g. "PRINTER_IP_NOT_FOUND"
            message:
              type: string
              description: Human-readable english string describing the error, e.g. "The printer at IP address 10.34.0.1 could not be found"
    OperationAcceptedModel:
      description: Response to requests with `?async=true`, which return immediately, and whose ongoing progress can be queried with GET to /operations/<operationId>
      type: object
      properties:
        operationId:
          description: Randomly-generated UUID for this operation
          type: string
    ScenePositionModel:
      type: object
      description: The global position within the build volume of a printer of the model in the scene
      properties:
        x:
          type: number
          description: X-position, with 0 at the center of the print volume, and positive values moving to the right as you face the printer.
        y:
          type: number
          description: Y-position, with 0 at the center of the print volume and positive values moving away from you as you face the printer.
        z:
          type: number
          description: Vertical position of the model, with 0 at the bottom of the build platform.
      required:
        - x
        - y
        - z
    OrientationModel:
      type: object
      description: >
        The orientation of the model in the scene.
        It can be specified using one of the following:
        Euler angles, a transform matrix, or direction vectors.
      oneOf:
        - $ref: '#/components/schemas/EulerAnglesModel'
        - $ref: '#/components/schemas/TransformMatrixModel'
        - $ref: '#/components/schemas/DirectionVectorsModel'
    EulerAnglesModel:
      type: object
      description: "Orientation specified using Euler angles in degrees. Rotation applied in the order: z, x, y"
      properties:
        x:
          type: number
          description: Rotation in degrees around the x axis (applied second)
        y:
          type: number
          description: Rotation in degrees around the y axis (applied last)
        z:
          type: number
          description: Rotation in degrees around the z axis (applied first)
      required:
        - x
        - y
        - z
    TransformMatrixModel:
      type: object
      description: Orientation specified a 3x3 matrix, the linear component of a 3D rigid transform.
      properties:
        linear:
          type: array
          items:
            type: array
            items:
              type: number
            minItems: 3
            maxItems: 3
          minItems: 3
          maxItems: 3
      required:
        - linear
    DirectionVectorsModel:
      type: object
      properties:
        z_direction:
          type: array
          description: >
            3D unit vector in model space saying which piece of the model will point "up" in scene space.
          items:
            type: number
          minItems: 3
          maxItems: 3
        x_direction:
          type: array
          description: >
            3D unit vector in model space, perpendicular to Z direction, saying which piece of the
            model will point "right" in scene space.
          items:
            type: number
          minItems: 3
          maxItems: 3
      required:
        - z_direction
        - x_direction
    UnitsModel:
      type: string
      description: The units of the model
      enum:
        - MILLIMETERS
        - INCHES
    ImportUnitsModel:
      type: string
      description: The units of the model
      default: DETECTED
      enum:
        - DETECTED
        - MILLIMETERS
        - INCHES
    LockModel:
      type: string
      description: The orientation constraints of the model, which auto-pack operations will use
      default: FREE
      enum:
        - FREE
        - LOCKED_XY_ROTATION_FREE_TRANSLATION
        - LOCKED_ROTATION_FREE_TRANSLATION
        - FULLY_LOCKED
    ModelProperties:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the model
        name:
          type: string
          description: The name of the model used within job preparation.
        position:
          $ref: '#/components/schemas/ScenePositionModel'
        orientation:
          $ref: '#/components/schemas/EulerAnglesModel'
        scale:
          type: number
          description: The scale factor to apply to the model
        units:
          $ref: '#/components/schemas/UnitsModel'
        bounding_box:
          type: object
          properties:
            min_corner:
              $ref: '#/components/schemas/ScenePositionModel'
            max_corner:
              $ref: '#/components/schemas/ScenePositionModel'
        original_file:
          type: string
          description: The original file path of the model
        visible:
          type: boolean
          description: Whether the model is visible in the scene
        has_supports:
          type: boolean
          description: Whether the model has supports
        in_bounds:
          type: boolean
          description: Whether the model is within the build volume
        raw_mesh_hash:
          type: string
          description: The hash of the raw mesh data
        canonical_model_hash:
          type: string
          description: The hash of the mesh data and its transform (position, orientation, and scale)
        lock:
          $ref: '#/components/schemas/LockModel'
    SceneTypeModel:
      type: object
      oneOf:
        - type: object
          title: "Manual"
          properties:
            machine_type:
              type: string
              description: The machine type of the scene
            material_code:
              type: string
              description: The material code of the scene
            print_setting:
              type: string
              description: The print setting of the scene
            layer_thickness_mm:
              description: The slice thickness of the scene
              oneOf:
                - type: string
                  enum:
                    - "ADAPTIVE"
                - type: number
                  description: Layer thickness in millimeters
            custom_print_setting_id:
              type: string
              description: The ID of the custom print setting used, if any.
          required:
            - machine_type
            - material_code
            - layer_thickness_mm
          additionalProperties: false
        - type: object
          title: "FPS File"
          properties:
            fps_file:
              type: string
              description: The full path to the .FPS file
          required:
            - fps_file
          additionalProperties: false
    MaterialUsageModel:
      oneOf:
        - type: object
          title: "SLA"
          properties:
            volume_ml:
              type: number
              description: The total volume of models and supports in the scene
            unsupported_volume_ml:
              type: number
              description: The total volume of all models in the scene, not including their supports
          required:
            - volume_ml
            - unsupported_volume_ml
          additionalProperties: false
        - type: object
          title: "SLS"
          properties:
            total_powder_ml:
              type: number
            total_powder_kg:
              type: number
            total_sintered_powder_ml:
              type: number
            total_sintered_powder_kg:
              type: number
            mass_packing_density:
              type: number
          required:
            - total_powder_ml
            - total_powder_kg
            - total_sintered_powder_ml
            - total_sintered_powder_kg
            - mass_packing_density
          additionalProperties: false
    SceneModel:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/ModelProperties'
        scene_settings:
          $ref: '#/components/schemas/SceneTypeModel'
        material_usage:
          $ref: '#/components/schemas/MaterialUsageModel'
        layer_count:
          type: integer
          description: The number of layers in the scene
    RepairBehaviorModel:
      type: string
      description: The behavior to use when loading a broken model
      default: "ERROR"
      enum:
        - "REPAIR"
        - "ERROR"
        - "IGNORE"
    ModelsSelectionModel:
      oneOf:
        - type: string
          title: Select all models
          enum:
            - "ALL"
        - type: array
          title: Apply to a list of specific models
          items:
            type: string
            description: The ID of the model
      default: "ALL"
    WebAuthTokensModel:
      type: object
      properties:
        access_token:
          type: string
          description: The access token for the user
        refresh_token:
          type: string
          description: The refresh token for the user
    UserInformationModel:
      type: object
      properties:
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        persistent_id:
          type: string
    PrintValidationResultModel:
      type: object
      properties:
        per_model_results:
          type: object
          description: A map of model IDs to their print validation results.
          additionalProperties:
            type: object
            properties:
              cups:
                type: integer
                description: The number of cups in the model
              unsupported_minima:
                type: integer
                description: The number of unsupported minima in the model
              undersupported:
                type: boolean
                description: Whether the model is undersupported
              has_seamline:
                type: boolean
                description: Whether the model has a seamline
    EstimatedPrintTimeModel:
      oneOf:
        - type: object
          title: SLA Printer Types
          properties:
            total_print_time_s:
              type: number
            preprint_time_s:
              type: number
            printing_time_s:
              type: number
          additionalProperties: false
        - type: object
          title: SLS Printer Types
          properties:
            total_print_time_s:
              type: number
            preprint_time_s:
              type: number
            printing_time_s:
              type: number
            cool_to_removal_time_s:
              type: number
              description: Time it takes to cool the build chamber to around 100°C when it can be removed from the printer.
            additional_cool_to_room_temp_time_s:
              type: number
              description: Time it takes to cool the build from around 100°C to nearly room temperature while inside of the printer.
          additionalProperties: false
    BaseDeviceStatusModel:
      type: object
      properties:
        id:
          type: string
        product_name:
          type: string
        status:
          type: string
        is_connected:
          type: boolean
        connection_type:
          type: string
          enum:
            - UNKNOWN
            - VIRTUAL
            - REMOTE
            - USB
            - WIFI
            - ETHERNET
            - ""
        ip_address:
          type: string
        firmware_version:
          type: string
      required:
        - id
        - product_name
        - status
        - is_connected
        - connection_type
        - ip_address
        - firmware_version
    BasePrintingDeviceStatusModel:
      allOf:
        - $ref: '#/components/schemas/BaseDeviceStatusModel'
        - type: object
          properties:
            ready_to_print_now:
              type: boolean
              description: If the default behavior for newly uploaded jobs is to start printing them automatically. If false, uploaded jobs will be added to the printing queue.
          required:
            - ready_to_print_now
    GenericDeviceStatusModel:
      title: Generic Device
      allOf:
        - $ref: '#/components/schemas/BaseDeviceStatusModel'
        - type: object
          additionalProperties: false
    FleetControlPrinterGroupDeviceStatusModel:
      title: Fleet Control Printer Group
      allOf:
        - $ref: '#/components/schemas/BasePrintingDeviceStatusModel'
        - type: object
          properties:
            dashboard_group_id:
              type: string
            dashboard_queue_id:
              type: string
            queue_paused:
              type: boolean
            has_form_auto:
              type: boolean
            supported_machine_type_ids:
              type: array
              items:
                type: string
                description: The ID of the supported machine type
            printers:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  machine_type_id:
                    type: string
                additionalProperties: false
          required:
            - dashboard_group_id
            - dashboard_queue_id
            - queue_paused
            - has_form_auto
            - supported_machine_type_ids
            - printers
          additionalProperties: false
    Form4FamilyDeviceStatusModel:
      title: Form 4 or Form 4L Printer
      allOf:
        - $ref: '#/components/schemas/BasePrintingDeviceStatusModel'
        - type: object
          properties:
            is_remote_print_enabled:
              type: boolean
            estimated_print_time_remaining_ms:
              type: integer
            tank_id:
              type: string
            tank_material_code:
              type: string
            cartridge_data:
              type: object
              additionalProperties:
                type: object
                properties:
                  cartridgeMaterialCode:
                    type: string
                  cartridgeEstimatedVolumeDispensed_mL:
                    type: number
                  cartridgeOriginalVolume_mL:
                    type: number
                required:
                  - cartridgeMaterialCode
                  - cartridgeEstimatedVolumeDispensed_mL
                  - cartridgeOriginalVolume_mL
                additionalProperties: false
          required:
            - is_remote_print_enabled
            - estimated_print_time_remaining_ms
            - tank_id
            - tank_material_code
            - cartridge_data
          additionalProperties: false
    Form3FamilyDeviceStatusModel:
      title: Form 3 or Form 3L Printer
      allOf:
        - $ref: '#/components/schemas/BasePrintingDeviceStatusModel'
        - type: object
          properties:
            is_remote_print_enabled:
              type: boolean
            estimated_print_time_remaining_ms:
              type: integer
            tank_id:
              type: string
            tank_material_code:
              type: string
            cartridge_data:
              type: object
              additionalProperties:
                type: object
                properties:
                  cartridgeMaterialCode:
                    type: string
                  cartridgeEstimatedVolumeDispensed_mL:
                    type: number
                  cartridgeOriginalVolume_mL:
                    type: number
                required:
                  - cartridgeMaterialCode
                  - cartridgeEstimatedVolumeDispensed_mL
                  - cartridgeOriginalVolume_mL
                additionalProperties: false
            form_auto_status:
              type: string
          required:
            - is_remote_print_enabled
            - estimated_print_time_remaining_ms
            - tank_id
            - tank_material_code
            - cartridge_data
            - form_auto_status
          additionalProperties: false
    Fuse1DeviceStatusModel:
      title: Fuse 1/1+ Printer
      allOf:
        - $ref: '#/components/schemas/BasePrintingDeviceStatusModel'
        - type: object
          properties:
            is_remote_print_enabled:
              type: boolean
            estimated_print_time_remaining_ms:
              type: integer
            bed_temperature_c:
              type: number
            powder_level:
              type: string
            printing_layer:
              type: integer
            printing_guid:
              type: string
            cylinder_material_code:
              type: string
            cylinder_serial:
              type: string
            printer_material_code:
              type: string
            powder_credit_g:
              type: number
          required:
            - is_remote_print_enabled
            - estimated_print_time_remaining_ms
            - bed_temperature_c
            - powder_level
            - printing_layer
            - printing_guid
            - cylinder_material_code
            - cylinder_serial
            - printer_material_code
            - powder_credit_g
          additionalProperties: false
    Form2DeviceStatusModel:
      title: Form 2 Printer
      allOf:
        - $ref: '#/components/schemas/BasePrintingDeviceStatusModel'
        - type: object
          properties:
            estimated_print_time_remaining_ms:
              type: integer
            tank_id:
              type: string
            tank_material_code:
              type: string
            cartridge_data:
              type: object
              additionalProperties:
                type: object
                properties:
                  cartridgeMaterialCode:
                    type: string
                  cartridgeEstimatedVolumeDispensed_mL:
                    type: number
                  cartridgeOriginalVolume_mL:
                    type: number
                required:
                  - cartridgeMaterialCode
                  - cartridgeEstimatedVolumeDispensed_mL
                  - cartridgeOriginalVolume_mL
                additionalProperties: false
          required:
            - estimated_print_time_remaining_ms
            - tank_id
            - tank_material_code
            - cartridge_data
          additionalProperties: false
    DeviceStatusModel:
      type: object
      oneOf:
        - $ref: '#/components/schemas/GenericDeviceStatusModel'
        - $ref: '#/components/schemas/FleetControlPrinterGroupDeviceStatusModel'
        - $ref: '#/components/schemas/Form4FamilyDeviceStatusModel'
        - $ref: '#/components/schemas/Form3FamilyDeviceStatusModel'
        - $ref: '#/components/schemas/Fuse1DeviceStatusModel'
        - $ref: '#/components/schemas/Form2DeviceStatusModel'
paths:
  /:
    get:
      summary: Get API Version
      operationId: getApiVersion
      description: "Get the version of the API"
      tags:
        - "API Info"
      responses:
        "200":
          description: API version
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
  /login/:
    post:
      summary: Login
      operationId: login
      description: "Log in to Formlabs Web Services using an existing formlabs.com account."
      tags:
        - "Remote Access"
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: "Username and password"
                  required:
                    - username
                    - password
                  properties:
                    username:
                      type: string
                    password:
                      type: string
                  additionalProperties: false
                - type: object
                  title: "Access token"
                  required:
                    - access_token
                  properties:
                    access_token:
                      type: string
                  additionalProperties: false
            examples:
              UsernameAndPassword:
                value:
                  username: "username"
                  password: "password"
              AccessToken:
                value:
                  access_token: "EXAMPLE_ACCESS_TOKEN"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebAuthTokensModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /logout/:
    post:
      summary: Log out
      operationId: logout
      description: "Log out of Formlabs Web Services"
      tags:
        - "Remote Access"
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /user/:
    get:
      summary: Get logged in user information
      operationId: getUser
      description: "Get the logged in user's account information"
      tags:
        - "Remote Access"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInformationModel'
        "404":
          description: No user is logged in
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /scene/:
    get:
      summary: Get Scene
      operationId: getScene
      description: "Get data about the current scene"
      tags:
        - "Getting Scene Information"
      responses:
        "200":
          description: Scene description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneModel'
    post:
      summary: Create Scene
      operationId: createScene
      description: "Create a new scene"
      tags:
        - "Modifying a Scene"
      requestBody:
        description: >
          Create a scene with a given printing setup.

          For a full list of possible settings, call the GET /list-materials/ endpoint
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SceneTypeModel'
            examples:
              Form 4 Black V5:
                value:
                  machine_type: "FORM-4-0"
                  material_code: "FLGPBK05"
                  print_setting: "DEFAULT"
                  layer_thickness_mm: 0.025
              Fuse 1+ Nylon 11:
                value:
                  machine_type: "FS30-1-0"
                  material_code: FLP11B01
                  print_setting: DEFAULT
                  layer_thickness_mm: 0.11
              FPS file:
                value:
                  fps_file: "C:\\Users\\user\\Desktop\\test.fps"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      summary: Update Scene
      operationId: updateScene
      description: "Update the scene's properties"
      tags:
        - "Modifying a Scene"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SceneTypeModel'
            examples:
              Form 4 Black V5:
                value:
                  machine_type: "FORM-4-0"
                  material_code: "FLGPBK05"
                  print_setting: "DEFAULT"
                  layer_thickness_mm: 0.025
              Fuse 1+ Nylon 11:
                value:
                  machine_type: "FS30-1-0"
                  material_code: FLP11B01
                  print_setting: DEFAULT
                  layer_thickness_mm: 0.11
              FPS file:
                value:
                  fps_file: "C:\\Users\\user\\Desktop\\test.fps"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /load-form/:
    post:
      summary: Load .form file
      operationId: loadFormFile
      description: "Load a .form file and create a new scene from it"
      tags:
        - "Modifying a Scene"
      requestBody:
        description: Full path to the .form file to load
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
            example:
              file: "C:\\Users\\user\\Desktop\\test.form"
      responses:
        "200":
          description: Scene description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneModel'
  /scene/save-form/:
    post:
      summary: Save .form file
      operationId: saveFormFile
      description: "Save the current scene to a .form file"
      tags:
        - "Exporting"
      requestBody:
        description: Full path where the file should be saved
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
            example:
              file: "C:\\Users\\user\\Desktop\\test.form"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /scene/save-screenshot/:
    post:
      summary: Save screenshot file
      operationId: saveScreenshot
      description: "Save a screenshot of the current scene."
      tags:
        - "Exporting"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        description: Full path where the image should be saved
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  description: The file path to save the .png screenshot to
                  pattern: "^.*\\.png$"
                view_type:
                  type: string
                  description: The type of view to use when taking the screenshot
                  enum:
                    - "ZOOM_ON_MODELS"
                    - "FULL_BUILD_VOLUME"
                    - "FULL_PLATFORM_WIDTH"
                  default: "ZOOM_ON_MODELS"
                yaw:
                  type: number
                  description: Yaw rotation in degrees for the camera's view, where 0º looks down the negative X-axis
                  default: 45.0
                pitch:
                  type: number
                  description: Pitch rotation in degrees for the camera's view, where 0º looks flat from the horizon and positive angles look down on models (in SLA scenes, toward the build platform)
                  default: 35.264
                image_size_px:
                  type: integer
                  description: Size of the largest dimension of the exported image in pixels.
                  default: 820
                crop_to_models:
                  type: boolean
                  description: If the screenshot view should be sized and cropped so the models take up most of the frame. If false, the zooming will be the same for all viewing angles.
                  default: true
                models:
                  $ref: '#/components/schemas/ModelsSelectionModel'
            examples:
              Minimal:
                value:
                  file: "C:\\Users\\user\\Desktop\\screenshot.png"
              FullOptions:
                value:
                  file: "C:\\Users\\user\\Desktop\\screenshot.png"
                  view_type: "FULL_BUILD_VOLUME"
                  models: ["0000537c-9ae2-426a-82ee-a007191a8fb5"]
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /scene/save-fps-file/:
    post:
      summary: Save FPS file
      operationId: saveFpsFile
      description: "Save the print settings of the current scene to a .fps file"
      tags:
        - "Exporting"
      requestBody:
        description: Full path where the FPS file should be saved
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  description: The file path to save the .fps file to
                  pattern: "^.*\\.fps$"
            examples:
              Minimal:
                value:
                  file: "C:\\Users\\user\\Desktop\\custom-grey.fps"
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /scene/models/{id}/:
    get:
      summary: Get model
      operationId: getModel
      description: "Get a model's properties"
      tags:
        - "Getting Scene Information"
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the model
          schema:
            type: string
      responses:
        "200":
          description: Model description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProperties'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      summary: Update model
      operationId: updateModel
      description: "Update a model's properties"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the model
          schema:
            type: string
      requestBody:
        description: Model properties to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the model used within job preparation.
                position:
                  $ref: '#/components/schemas/ScenePositionModel'
                orientation:
                  $ref: '#/components/schemas/OrientationModel'
                scale:
                  type: number
                  description: The scale factor to apply to the model
                units:
                  $ref: '#/components/schemas/UnitsModel'
                lock:
                  $ref: '#/components/schemas/LockModel'
            examples:
              ChangePosition:
                value:
                  position:
                    x: 10
                    y: 1
                    z: 2
              FullInput:
                value:
                  name: "New name"
                  position:
                    x: 10
                    y: 1
                    z: 2
                  orientation:
                    x: 50
                    y: 2
                    z: 39
                  scale: 0.5
                  units: "MILLIMETERS"
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      summary: Delete model
      operationId: deleteModel
      description: "Delete a model from the current scene"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the model
          schema:
            type: string
      responses:
        "200":
          description: OK
  /scene/models/{id}/duplicate/:
    post:
      summary: Duplicate model
      operationId: duplicateModel
      description: "Duplicate a model"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the model
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  type: integer
                  description: Number of duplicates to create
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /scene/models/{id}/replace/:
    post:
      summary: Replace model
      operationId: replaceModel
      description: "Replace a model currently in the scene with a new model, copying the existing models setup and supports"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the model
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: Full path to the file to load
                repair_behavior:
                  $ref: '#/components/schemas/RepairBehaviorModel'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  warnings:
                    type: array
                    items:
                      type: string
                  model_properties:
                    $ref: '#/components/schemas/ModelProperties'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /scene/import-model/:
    post:
      summary: Import model
      operationId: importModel
      description: "Import a model into the current scene"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  description: Full path to the file to load
                repair_behavior:
                  $ref: '#/components/schemas/RepairBehaviorModel'
                name:
                  type: string
                  description: The name of the model used within job preparation.
                position:
                  $ref: '#/components/schemas/ScenePositionModel'
                orientation:
                  $ref: '#/components/schemas/OrientationModel'
                scale:
                  type: number
                  default: 1
                  description: The scale factor to apply to the model
                units:
                  $ref: '#/components/schemas/ImportUnitsModel'
                lock:
                  $ref: '#/components/schemas/LockModel'
            examples:
              MinimalInput:
                value:
                  file: "C:\\Users\\user\\Desktop\\test.stl"
              FullInput:
                value:
                  file: "C:\\Users\\user\\Desktop\\test.stl"
                  repair_behavior: "REPAIR"
                  name: "Test Model"
                  position:
                    x: 10
                    y: 1
                    z: 2
                  orientation:
                    x: 50
                    y: 2
                    z: 39
                  scale: 0.5
                  units: "MILLIMETERS"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProperties'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /scene/print/:
    post:
      summary: Print
      operationId: print
      description: |
        Upload the current scene to a printer or Fleet Control.

        By default, only locally discovered printer names or local IP addresses are supported.
        To upload prints remotely to your Fleet Control queue or printers registered to your
        Dashboard account, you must be logged in and have an Internet connection.
        Use the Login endpoint to authenticate with Formlabs Web Services.
      tags:
        - "Printing"
        - "Remote Access"
        - "Operations"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - printer
                - job_name
              properties:
                printer:
                  type: string
                  description: Printer serial name, IP address, or Fleet Control Queue ID
                job_name:
                  type: string
                find_printer_timeout_seconds:
                  type: integer
                  description: Number of seconds to wait to find the given printer.
                  minimum: 0
                  default: 30
                print_now:
                  type: boolean
                  description: >
                    If true, the job should be printed immediately if the printer's "ready_to_print_now" status is true.
                    Attempting to print now on a printer that does not support it will result in an error.
                    If false, the job should be uploaded to the printer's local queue.
                    Not including this value will default to printing now if the printer is in a ready state, and queueing the job otherwise.
            example:
              printer: "10.35.15.12"
              job_name: "Test Job"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                    description: ID of the uploaded job
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /scene/auto-orient/:
    post:
      summary: Auto Orient
      operationId: autoOrient
      description: "Automatically choose model orientation for printing"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        description: Models to run the auto orient operation on
        required: true
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - type: object
                  title: "Default"
                  required:
                    - models
                  properties:
                    models:
                      $ref: '#/components/schemas/ModelsSelectionModel'
                  additionalProperties: false
                - type: object
                  title: "Dental Mode"
                  required:
                    - models
                    - mode
                  properties:
                    models:
                      $ref: '#/components/schemas/ModelsSelectionModel'
                    mode:
                      description: "DENTAL mode applies algorithms used in PreForm's Dental Workspace"
                      type: string
                      enum:
                        - "DENTAL"
                    tilt:
                      type: integer
                      description: Degrees of tilt. Only applies to the DENTAL mode
                  additionalProperties: false
            examples:
              AllModels:
                value:
                  models: "ALL"
              SpecificModels:
                value:
                  models: ["0000537c-9ae2-426a-82ee-a007191a8fb5"]
              DentalModeWithTilt:
                value:
                  models: "ALL"
                  mode: "DENTAL"
                  tilt: 10
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /scene/auto-support/:
    post:
      summary: Auto Support
      operationId: autoSupport
      description: "Generate support structures on models"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        description: Models to run the auto support operation on
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - models
              properties:
                models:
                  $ref: '#/components/schemas/ModelsSelectionModel'
                density:
                  type: number
                  description: Unitless factor to adjust the density of supports (default is 1.0)
                  minimum: 0
                slope_multiplier:
                  type: number
                  description: Unitless factor to increase or decrease support density on steep slopes (default is 1.0)
                  minimum: 0
                only_minima:
                  type: boolean
                  description: Whether to only generate touchpoints on local minima, skipping all other supports. Default is false.
                raft_type:
                  type: string
                  description: The type of raft to apply to the models
                  enum:
                    - "FULL_RAFT"
                    - "MINI_RAFTS"
                    - "NONE"
                raft_label_enabled:
                  type: boolean
                  description: Whether to enable raft labeling
                breakaway_structure_enabled:
                  type: boolean
                  description: Whether to enable breakaway structure
                touchpoint_size_mm:
                  type: number
                  description: The size of the touchpoints
                  minimum: 0
                internal_supports_enabled:
                  type: boolean
                  description: Whether to enable internal supports
                raft_thickness_mm:
                  type: number
                  description: The thickness of the raft
                  minimum: 0
                height_above_raft_mm:
                  type: number
                  minimum: 0
                z_compression_correction_mm:
                  type: number
                  minimum: 0
                early_layer_merge_mm:
                  type: number
                  minimum: 0
            examples:
              AllModels:
                value:
                  models: "ALL"
              SpecificModels:
                value:
                  models: ["0000537c-9ae2-426a-82ee-a007191a8fb5"]
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /scene/auto-layout/:
    post:
      summary: Auto Layout
      operationId: autoLayout
      description: "Automatically arrange models on the build platform. Only applies to SLA-type scenes like the Form 4 (use /scene/auto-pack/ for SLS-type scenes like the Fuse 1+)"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        description: Models to run the auto layout operation on
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - models
              properties:
                models:
                  $ref: '#/components/schemas/ModelsSelectionModel'
                mode:
                  type: string
                  description: "`\"DENTAL\"` mode applies algorithms used in PreForm's Dental Workspace. Leave mode unset to use algorithms from the Standard Workspace."
                  enum:
                      - "DENTAL"
                model_spacing_mm:
                  type: number
                  description: Minimum (non-zero) distance between models in the scene.
                  minimum: 0
                allow_overlapping_supports:
                  type: boolean
                  description: Whether to allow rafts to overlap.
                lock_rotation:
                  type: boolean
                  description: Whether to keep model rotation about Z fixed during layout.
                build_platform_2_optimized:
                  type: boolean
                  description: Whether to optimize the build platform for two models.
            examples:
              All models, all parameters:
                value:
                  models: "ALL"
                  model_spacing_mm: 1.0
                  allow_overlapping_supports: false
                  lock_rotation: false
                  build_platform_2_optimized: false
              Specific models:
                value:
                  models: ["0000537c-9ae2-426a-82ee-a007191a8fb5"]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneModel'
        "400":
          description: |
            ## Bad Request

            The scene will not be modified if any error occurs. The response will contain an error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /scene/auto-pack/:
    post:
      summary: Auto Pack
      operationId: autoPack
      description: "Automatically arrange models in the build volume. Only applies to SLS-type scenes like the Fuse 1+ (use /scene/auto-layout/ for SLA-type scenes like the Form 4)"
      tags:
        - "Modifying a Scene"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        description: Auto pack parameters
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model_spacing_mm:
                  type: number
                  description: The minimum spacing between models when packing
                  minimum: 0
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SceneModel'
        "400":
          description: |
            ## Bad Request

            The scene will not be modified if any error occurs. The response will contain an error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /scene/print-validation/:
    get:
      summary: Get Print Validation
      operationId: getPrintValidation
      description: "Calculate the print validation for the current scene"
      tags:
        - "Getting Scene Information"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintValidationResultModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /scene/estimate-print-time/:
    post:
      summary: Estimate Print Time
      operationId: estimatePrintTime
      description: "Calculate the estimated print time for the current scene"
      tags:
        - "Getting Scene Information"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimatedPrintTimeModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /devices/:
    get:
      summary: Get Devices
      operationId: getDevices
      description: |
        List of previously discovered device statuses

        By default, only locally discovered printer names are returned.
        To include your Fleet Control queues or printers registered to your
        Dashboard account, you must be logged in and have an Internet connection.
        Use the Login endpoint to authenticate with Formlabs Web Services.
      tags:
        - "Devices"
        - "Remote Access"
      parameters:
        - name: can_print
          in: query
          description: If true, only devices that can receive prints will be returned.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of discovered devices
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStatusModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /devices/{id}/:
    get:
      summary: Get Device
      operationId: getDevice
      description: "Get a previously discovered device's status"
      tags:
        - "Devices"
        - "Remote Access"
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the printer
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceStatusModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /discover-devices/:
    post:
      summary: Discover Devices
      operationId: discoverDevices
      description: "Discover new devices on the network"
      tags:
        - "Devices"
        - "Remote Access"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                timeout_seconds:
                  type: integer
                  description: Number of seconds to wait when discovering devices
                ip_address:
                  type: string
                  description: "Local network IP address to attempt to discover a device at"
            examples:
              DiscoverAllWithTimeout:
                value:
                  timeout_seconds: 10
              DiscoverAtSpecificIP:
                value:
                  ip_address: "192.168.1.10"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of newly discovered devices
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStatusModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /upload-firmware/:
    post:
      summary: Upload Firmware
      operationId: uploadFirmware
      description: "Upload new firmware to a device"
      tags:
        - "Devices"
      parameters:
        - name: async
          in: query
          description: Whether to run the operation asynchronously
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                printer:
                  type: string
                  description: Local network IP address, or machine serial name to upload firmware to
                file_path:
                  type: string
                  description: "Local file path to the firmware .formware or .formware2 file"
              required:
                - printer
                - file_path
            examples:
              UploadFirmware:
                value:
                  printer: Form4-TestyTest
                  file_path: "C:\\Users\\user\\Desktop\\form4-public-1.9.0-2444.formware"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of newly discovered devices
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeviceStatusModel'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "202":
          description: Async operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAcceptedModel'
  /list-materials/:
    get:
      summary: List Materials
      operationId: listMaterials
      description: >
        List all available materials and material settings by printer type.

        The returned JSON has 3 layers: Printer types (e.g. "Form 4"), Materials (e.g. "Black V5"),
        and Material Setting (e.g. "0.025mm" or "0.100mm (Legacy)"). These "label" strings at each level
        are the preferred way of referring to that printer types, materials, and settings. They can
        presented in a UI as a 3-level dropdown menu, or a flat filtered list. This list is static
        (it will not change for a given version of the PreFormServer executable).

        Each value has `scene_settings` with all data needed to create a new scene. It can be passed
        directly to a /scene/ POST to create a scene for that printer, material, and materialSettings.
      tags:
        - "Print Settings"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  printer_types:
                    type: array
                    items:
                      type: object
                      properties:
                        label:
                          type: string
                        build_volume_dimensions_mm:
                          type: array
                          items:
                            type: number
                          minItems: 3
                          maxItems: 3
                        supported_machine_type_ids:
                          type: array
                          items:
                            type: string
                          minItems: 1
                        supported_product_names:
                          type: array
                          items:
                            type: string
                          minItems: 1
                        materials:
                          type: array
                          items:
                            type: object
                            properties:
                              label:
                                type: string
                              description:
                                type: string
                              material_settings:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    label:
                                      type: string
                                    scene_settings:
                                      $ref: '#/components/schemas/SceneTypeModel'
  /operations/:
    get:
      summary: List All Operations
      operationId: getAllOperations
      description: >
        List all in-progress, completed, and failed operations that have been started since this server was launched.
        Operations are not currently persisted across server restarts.

        To get the result of a completed or errored operation, call GET `/operations/{id}/`.
      tags:
        - "Operations"
      responses:
        '200':
          description: List of operations
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of operations
                  operations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Operation ID.
                        status:
                          type: string
                          enum:
                            - IN_PROGRESS
                            - SUCCEEDED
                            - FAILED
                          description: Current status of the operation.
                        progress:
                          type: number
                          format: float
                          description: Progress of the operation (0.0 to 1.0).
  /operations/{id}/:
    get:
      summary: Get Operation Status
      operationId: getOperation
      description: Retrieve the status, progress, and result of a long-running operation by its ID.
      tags:
        - "Operations"
      parameters:
        - name: id
          in: path
          description: The unique identifier of the operation.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation details. Will be a 200 regardless of if the operations is in progress, succeeded, or failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Operation ID.
                  status:
                    type: string
                    enum:
                      - IN_PROGRESS
                      - SUCCEEDED
                      - FAILED
                    description: Current status of the operation.
                  progress:
                    type: number
                    format: float
                    description: Progress of the operation (0.0 to 1.0).
                  result:
                    type: object
                    description:
                      Result of the operation, if succeeded or failed. Matches the schema of the operation or its error response.
        '404':
          description: Operation not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
